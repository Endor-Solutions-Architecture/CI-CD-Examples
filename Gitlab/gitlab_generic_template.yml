stages:
  - build
  - scan

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.

  # Endor Labs Environment Variables Configuration
  ENDORCTL_VERSION: "latest"
  ENDOR_NAMESPACE: "your namespace" # Insert your Endor Labs namespace here
  DEBUG: "false"  ## Set DEBUG to "true" to send logs to Endor Labs support
  
  ENDOR_API_CREDENTIALS_KEY: $ENDOR_API_CREDENTIALS_KEY
  ENDOR_API_CREDENTIALS_SECRET: $ENDOR_API_CREDENTIALS_SECRET

  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=.m2/repository
    -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true
  
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    -DinstallAtEnd=true
    -DdeployAtEnd=true  

java-build:
  # select the most appropriate image for your project
  image: maven:3.8-openjdk-11
  stage: build
  # Cache downloaded dependencies and plugins between builds.
  # The key here separates one cache per branch/tag ($CI_COMMIT_REF_SLUG)
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository
  script:
    - mvn $MAVEN_CLI_OPTS package -DskipTests=true
  artifacts:
    name: "Maven artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - "**/target"

Endor Labs Dependency Scan:
  stage: scan
  image: maven:3.8-openjdk-11 # Modify this image to align with the necessary build tools for your software packages
  before_script:

    # Install jq to download endorctl
    - apt-get update && apt-get install -y jq
    
    # Download and integrity check the endorctl binary
    - if [ "$ENDORCTL_VERSION" == "latest" ]; then
        echo "Downloading latest version of endorctl";
        ENDORCTL_SHA=$(curl https://api.endorlabs.com/meta/version | jq -r '.ClientChecksums.ARCH_TYPE_LINUX_AMD64');
        VERSION=$(curl https://api.endorlabs.com/meta/version | jq -r '.Service.Version');
        curl https://storage.googleapis.com/endorlabs/"$VERSION"/binaries/endorctl_"$VERSION"_linux_amd64 -o endorctl;
        echo "$ENDORCTL_SHA  endorctl" | sha256sum -c;
        if [ $? -ne 0 ]; then 
          echo "Integrity check failed"; 
          exit 1;
        fi
      else
        echo Downloading version "$ENDORCTL_VERSION" of endorctl;
        curl https://storage.googleapis.com/endorlabs/"$ENDORCTL_VERSION"/binaries/endorctl_"$ENDORCTL_VERSION"_linux_amd64 -o endorctl;
        echo "$ENDORCTL_SHA  endorctl" | sha256sum -c;
        if [ $? -ne 0 ]; then 
          echo "Integrity check failed for the pinned version of endorctl. Please ensure the environment variable is set and re-run the job"; 
          exit 1;
        fi
      fi
    - chmod +x ./endorctl
    
    - mvn clean install # Replace with your packages build steps. 

# Scan and upload results to Gitlab's Dependency Scanning reporting:
  script:
    - if [ "$DEBUG" == "true" ]; then
        export ENDOR_LOG_VERBOSE=true;
        export ENDOR_LOG_LEVEL=debug;
      fi
    - if [ "$CI_COMMIT_REF_NAME" == "$CI_DEFAULT_BRANCH" ]; then
        export ENDOR_AS_DEFAULT_BRANCH=true;
        export ENDOR_SCAN_DETACHED_REF_NAME="$CI_COMMIT_REF_NAME";
      else
        export ENDOR_CI_RUN=true;
      fi
      #upload results to gitlab:
    - ./endorctl scan -o json | python3 EndorLabs-to-Gitlab.py > endorLabsResults.findings.json
  
# Upload artifact to Gitlab's dependency scanning report:
  artifacts:
    reports:
      dependency_scanning: endorLabsResults.findings.json
    paths:
      - endorLabsResults.findings.json
